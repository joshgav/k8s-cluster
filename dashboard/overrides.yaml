image:
  tag: v2.3.1

# extraArgs:
#   - --enable-skip-login=false
#   - --enable-insecure-login=false
#   - --authentication-mode=token

# resources:
#   requests:
#     cpu: 100m
#     memory: 200Mi
#   limits:
#     cpu: 2
#     memory: 200Mi

## Serve application over HTTP without TLS
## Note: If set to true, you may want to add --enable-insecure-login to extraArgs
protocolHttp: false

service:
  type: ClusterIP
  # if protocolHttp == true, use 80
  externalPort: 443

  # LoadBalancerSourcesRange is a list of allowed CIDR values, which are combined with ServicePort to
  # set allowed inbound rules on the security group assigned to the master load balancer
  # loadBalancerSourceRanges: []

  ## Additional Kubernetes Dashboard Service annotations
  annotations: {}

  ## Here labels can be added to the Kubernetes Dashboard service
  labels:
    "app.kubernetes.io/component": ambassador-service

  ## set a specific load balancer Ip if you're using one
  # loadBalancerIP:

  ## Enable or disable the kubernetes.io/cluster-service label. Should be disabled for GKE clusters >=1.15.
  ## Otherwise, the addon manager will presume ownership of the service and try to delete it.
  clusterServiceLabel:
    enabled: true
    key: "kubernetes.io/cluster-service"

ingress:
  ## If true, Kubernetes Dashboard Ingress will be created.
  ##
  enabled: false

  ## Kubernetes Dashboard Ingress annotations
  ##
  ## Add custom labels
  # labels: {}
  annotations:
    "kubernetes.io/ingress.class": ambassador
  #  kubernetes.io/tls-acme: 'true'
  ## If you plan to use TLS backend with enableInsecureLogin set to false
  ## (default), you need to uncomment the below.
  ## If you use ingress-nginx < 0.21.0
  #   nginx.ingress.kubernetes.io/secure-backends: "true"
  ## if you use ingress-nginx >= 0.21.0
  #   nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"

  ## Kubernetes Dashboard Ingress paths
  ##
  paths:
    - /dashboard/

  ## Custom Kubernetes Dashboard Ingress paths. Will override default paths.
  customPaths: []
  #  - backend:
  #      serviceName: ssl-redirect
  #      servicePort: use-annotation
  #  - backend:
  #      serviceName: >-
  #        {{ include "kubernetes-dashboard.fullname" . }}
  #      # Don't use string here, use only integer value!
  #      servicePort: 443

  ## Kubernetes Dashboard Ingress hostnames
  ## Must be provided if Ingress is enabled
  ##
  # hosts:
  #   - ''

  ## Kubernetes Dashboard Ingress TLS configuration
  ## Secrets must be manually created in the namespace
  ##
  # tls:
  #   - secretName: kubernetes-dashboard-tls
  #     hosts:
  #       - kubernetes-dashboard.domain.com

settings:
  ## Cluster name that appears in the browser window title if it is set
  clusterName: jugsrv01
  ## Max number of items that can be displayed on each list page
  # itemsPerPage: 10
  ## Number of seconds between every auto-refresh of logs
  # logsAutoRefreshTimeInterval: 5
  ## Number of seconds between every auto-refresh of every resource. Set 0 to disable
  # resourceAutoRefreshTimeInterval: 5
  ## Hide all access denied warnings in the notification panel
  # disableAccessDeniedNotifications: false

## Pinned CRDs that will be displayed in dashboard's menu
pinnedCRDs: []
  # - kind: customresourcedefinition
  ##  Fully qualified name of a CRD
  #   name: prometheuses.monitoring.coreos.com
  ##  Display name
  #   displayName: Prometheus
  ##  Is this CRD namespaced?
  #   namespaced: true

## Metrics Scraper
## Container to scrape, store, and retrieve a window of time from the Metrics Server.
## refs: https://github.com/kubernetes-sigs/dashboard-metrics-scraper
metricsScraper:
  enabled: false
  image:
    repository: kubernetesui/metrics-scraper
    tag: v1.0.6
  resources: {}
  ## SecurityContext for the metrics scraper container
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsUser: 1001
    runAsGroup: 2001
#  args:
#    - --log-level=info
#    - --logtostderr=true

## Optional Metrics Server sub-chart
## Enable this is you don't already have metrics-server enabled on your cluster and
## want to use it with dashboard metrics-scraper
## refs:
##  - https://hub.helm.sh/charts/stable/metrics-server
##  - https://github.com/kubernetes-sigs/metrics-server
metrics-server:
  enabled: false
  ## Example for additional args
  # args:
  #  - --kubelet-preferred-address-types=InternalIP
  #  - --kubelet-insecure-tls

rbac:
  # Specifies whether namespaced RBAC resources (Role, Rolebinding) should be created
  create: true

  # Specifies whether cluster-wide RBAC resources (ClusterRole, ClusterRolebinding) to access metrics should be created
  # Independent from rbac.create parameter.
  clusterRoleMetrics: true

  # Start in ReadOnly mode.
  # Only dashboard-related Secrets and ConfigMaps will still be available for writing.
  #
  # The basic idea of the clusterReadOnlyRole
  # is not to hide all the secrets and sensitive data but more
  # to avoid accidental changes in the cluster outside the standard CI/CD.
  #
  # It is NOT RECOMMENDED to use this version in production.
  # Instead you should review the role and remove all potentially sensitive parts such as
  # access to persistentvolumes, pods/log etc.
  #
  # Independent from rbac.create parameter.
  clusterReadOnlyRole: false